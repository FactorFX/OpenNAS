#!/bin/sh
#
# Part of NAS4Free (http://www.nas4free.org).
# Copyright (c) 2012-2015 The NAS4Free Project <info@nas4free.org>.
# All rights reserved.
#
# Portions of freenas (http://www.freenas.org).
# Copyright (c) 2005-2011 Olivier Cochard-Labbe <olivier@freenas.org>.
# All rights reserved.
#

# PROVIDE: sshd
# REQUIRE: LOGIN FILESYSTEMS
# XQUERY: -i "count(//sshd/enable) > 0" -o "0" -b
# RCVAR: sshd

. /etc/rc.subr
. /etc/configxml.subr

name="sshd"
rcvar="sshd_enable"

load_rc_config "$name"

# Custom commands
start_precmd="sshd_mkconf"
mkconf_cmd="sshd_mkconf"
extra_commands="reload mkconf"

# Defaults
sshd_enable=${sshd_enable:-"NO"}
sshd_config=${sshd_config:-"/var/etc/ssh/sshd_config"}
sshd_hostdsakey=${sshd_hostdsakey:-"/var/etc/ssh/ssh_host_dsa_key"}
command="/usr/sbin/${name}"
command_args="-f /var/etc/ssh/sshd_config -h /var/etc/ssh/ssh_host_dsa_key"
pidfile="/var/run/${name}.pid"

: ${sshd_rsa1_enable:="yes"}
: ${sshd_rsa_enable:="yes"}
: ${sshd_dsa_enable:="yes"}
: ${sshd_ecdsa_enable:="yes"}
: ${sshd_ed25519_enable:="yes"}

sshd_keygen_alg()
{
	local alg=$1
	local ALG="$(echo $alg | tr a-z A-Z)"
	local keyfile

	if ! checkyesno "sshd_${alg}_enable" ; then
		return 0
	fi

	case $alg in
	rsa1)
		keyfile="/etc/ssh/ssh_host_key"
		;;
	rsa|dsa|ecdsa|ed25519)
		keyfile="/etc/ssh/ssh_host_${alg}_key"
		;;
	*)
		return 1
		;;
	esac

	if [ ! -x /usr/bin/ssh-keygen ] ; then
		warn "/usr/bin/ssh-keygen does not exist."
		return 1
	fi

	if [ -f "${keyfile}" ] ; then
		info "$ALG host key exists."
	else
		echo "Generating $ALG host key."
		/usr/bin/ssh-keygen -q -t $alg -f "$keyfile" -N ""
		/usr/bin/ssh-keygen -l -f "$keyfile.pub"
	fi
}

sshd_keygen()
{
    sshd_keygen_alg rsa1
    sshd_keygen_alg rsa
    sshd_keygen_alg dsa
    sshd_keygen_alg ecdsa
    sshd_keygen_alg ed25519
}

sshd_mkconf()
{
	local _privatekey

	# Create sshd_config file
	/usr/local/bin/xml sel -t \
		-o "SyslogFacility LOCAL3" -n \
		-o "Protocol 2" -n \
		-o "UseDNS no" -n \
		-i "string-length(//sshd/subsystem) > 0" -v "concat('Subsystem ', //sshd/subsystem)" -n -b \
		-i "string-length(//sshd/subsystem) = 0" -v "concat('Subsystem ', 'sftp /usr/libexec/sftp-server')" -n -b \
		-o "ChallengeResponseAuthentication no" -n \
		-m "//sshd" \
			-i "count(port) > 0" -v "concat('Port ',port)" -n -b \
			-i "count(permitrootlogin) > 0" -o "PermitRootLogin yes" -n -b \
			-i "count(tcpforwarding) = 0" -o "AllowTcpForwarding no" -n -b \
			-i "count(tcpforwarding) > 0" -o "AllowTcpForwarding yes" -n -b \
			-i "count(compression) > 0" -o "Compression yes" -n -b \
			-i "count(passwordauthentication) > 0" -o "PasswordAuthentication yes" -n -b \
			-i "count(pubkeyauthentication) > 0" -o "PubkeyAuthentication yes" -n -b \
			-m "auxparam" \
				-v "." -n \
			-b \
		-b \
		${configxml_file} | /usr/local/bin/xml unesc > ${sshd_config}

	# Create ssh_host_dsa_key file
	_privatekey=`configxml_get "//sshd/private-key"`
	if [ -n "${_privatekey}" ]; then
		echo "${_privatekey}" > ${sshd_hostdsakey}.tmp
		/usr/bin/uudecode -m -p -r ${sshd_hostdsakey}.tmp > ${sshd_hostdsakey}
		/bin/rm -f ${sshd_hostdsakey}.tmp
	else
		sshd_keygen
	fi

	/bin/chmod 0600 ${sshd_hostdsakey}
}

run_rc_command "$1"
