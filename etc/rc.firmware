#!/bin/sh
#
# /etc/rc.firmware
#
# Part of NAS4Free (http://www.nas4free.org).
# Copyright (c) 2012-2015 The NAS4Free Project <info@nas4free.org>.
# All rights reserved.
#
# Portions of freenas (http://www.freenas.org).
# Copyright (c) 2005-2011 Olivier Cochard-Labbe <olivier@freenas.org>.
# All rights reserved.
#
# Script usage:
# rc.firmware <args> [<file>]
# Where <args> can take the following values:
# - enable: Create a 256MB ram drive in ${FTMP}
# - disable: Erase ram drive
# - upgrade <file> : Do an embedded release (IMG file) upgrade using the file <file>
# - fullupgrade <file> : Do a full release (TGZ file) upgrade using the file <file>
#

SIZE="512M"
PLATFORM=`cat /etc/platform`
XARCH=`/bin/echo ${PLATFORM} | sed -e 's/-.*//'`
ARCH=`/usr/bin/uname -m`
if [ "${ARCH}" == "arm" ]; then
	# write to pre-aligned partition
	CFDEVICE=`cat /etc/cfdevice`
else
	CFDEVICE=`cat /etc/cfdevice | sed -e 's/[a-h]$//'`
fi
FTMP="/var/tmp/ftmp"

backup_chflags() {
 	TOPROCESS="bin lib libexec sbin usr"
 	for files in $TOPROCESS; do
 		/usr/sbin/mtree -Pcp /${files} | /usr/bin/gzip -9 > /tmp/chflags.dist.${files}.gz
 	done
}

restore_chflags() {
 	TOPROCESS="bin lib libexec sbin usr"
 	for files in $TOPROCESS; do
 		cd / && /usr/bin/zcat /tmp/chflags.dist.${files}.gz | /usr/sbin/mtree -PU -p /${files}
 	done
}

remove_chflags() {
 	TOPROCESS="bin lib libexec sbin usr"
 	for files in $TOPROCESS; do
 		/bin/chflags -R noschg /${files}
 		/bin/chmod -R u+rw /${files}
 	done
}

case $1 in
	enable)
		# Redirect I/O to console.
		exec </dev/console >/dev/console 2>/dev/console

		# Use efficient memory file system
		/sbin/mount -t tmpfs -o size=${SIZE},mode=1777 tmpfs ${FTMP} > /dev/null 2>&1
		if [ 0 != $? ]; then # successfully?
			msg="ERROR: Failed to create in-memory file system."
			printf "\n\33[31m%s\33[0m\n" "${msg}"
			/usr/bin/logger "UPGRADE ${msg}"
			exit 1
		fi
		;;

	disable)
		# Redirect I/O to console.
		exec </dev/console >/dev/console 2>/dev/console

		# Get the md device.
		mdid=`/sbin/mount -p | /usr/bin/grep ${FTMP} | /usr/bin/awk '{print $1}'`

		# Umount in-memory file system.
		/sbin/umount -f ${FTMP} > /dev/null 2>&1
		if [ 0 != $? ]; then # successfully?
			msg="ERROR: Failed to umount in-memory file system."
			printf "\n\33[31m%s\33[0m\n" "${msg}"
			/usr/bin/logger "UPGRADE ${msg}"
			exit 1
		fi
		;;

	upgrade)
		# Wait 5 seconds before beginning
		sleep 5

		# Redirect I/O to console.
		exec </dev/console >/dev/console 2>/dev/console

		printf "\n\n\33[37m%s\33[0m\n" "Firmware upgrade in progress. Please wait..."

		# Check if firmware file exists
		if [ ! -r "$2" ]; then
			msg="ERROR: Firmware file does not exist."
			printf "\n\33[31m%s\33[0m\n" "${msg}"
			/usr/bin/logger "UPGRADE ${msg}"
			exit 1
		fi

		# Test firmware file
		/usr/bin/xz -t "$2" 2>&1
		if [ 0 != $? ]; then
			msg="ERROR: Firmware file is corrupted."
			printf "\n\33[31m%s\33[0m\n" "${msg}"
			/usr/bin/logger "UPGRADE ${msg}"
			exit 1
		fi

		# Backup config
		mkdir /tmp/configbak
		cp -p /conf/* /tmp/configbak
		if [ -f /cf/boot.config ]; then
			cp -p /cf/boot.config /tmp/configbak
		fi
		# Backup loader.conf.local
		if [ -f /cf/boot/loader.conf.local ]; then
			cp -p /cf/boot/loader.conf.local /tmp/configbak
		fi

		# Unmount /cf
		/sbin/umount -f /cf
		if [ 0 != $? ]; then # successfully?
			msg="ERROR: Failed to umount '/cf'!"
			printf "\33[31m%s\33[0m\n" "${msg}"
			/usr/bin/logger "UPGRADE ${msg}"
		fi

		# Remove swap on booting device if any
		if [ -f /etc/swapdevice ]; then
			SWAPDEVICE=`cat /etc/swapdevice`
			if [ "${ARCH}" != "arm" -a "${SWAPDEVICE}" != "NONE" -a -e "${SWAPDEVICE}" ]; then
				echo "swapoff ${SWAPDEVICE}"
				swapoff -q ${SWAPDEVICE} 2>/dev/null
			fi
		fi

		# dd image onto card
		result=1
		if [ -r "$2" ]; then
			/usr/bin/xz -cdv "$2" | /bin/dd of=/dev/${CFDEVICE} ibs=16k obs=16k > /dev/null 2>&1
			result=$?
			if [ 0 != ${result} ]; then # successfully?
				msg="ERROR: Failed to install firmware image on '/dev/${CFDEVICE}'!"
				printf "\33[31m%s\33[0m\n" "${msg}"
				/usr/bin/logger "UPGRADE ${msg}"
			else
				msg="Firmware installed successfully."
				printf "\33[37;44m%s\33[0m\n" "${msg}"
				/usr/bin/logger "UPGRADE: ${msg}"
			fi
		fi

		#if [ -f /etc/swapdevice ]; then
		#	SWAPDEVICE=`cat /etc/swapdevice`
		#	if [ "${SWAPDEVICE}" != "NONE" -a -e "${SWAPDEVICE}" ]; then
		#		echo "swapon ${SWAPDEVICE}"
		#		swapon -q ${SWAPDEVICE} 2>/dev/null
		#	fi
		#fi

		# Mount /cf read-write
		/sbin/mount -w -o noatime /cf

		# Restore config
		cp -p /tmp/configbak/* /conf
		if [ -f /conf/boot.config ]; then
			mv /conf/boot.config /cf
		fi
		# Restore loader.conf.local
		if [ -f /conf/loader.conf.local ]; then
			mv /conf/loader.conf.local /cf/boot
		fi
		rm -r /tmp/configbak

		# Remount /cf read-only
		/sbin/umount -f /cf
		/sbin/mount -r /cf

		# Umount tmpfs
		/sbin/umount -f ${FTMP} > /dev/null 2>&1

		# Reboot system if upgrade was successfully.
		if [ 0 -eq ${result} ]; then
			msg="Rebooting server..."
			printf "\33[37m%s\33[0m\n" "${msg}"
			/usr/bin/logger "${msg}"
			/sbin/shutdown -r now > /dev/null 2>&1
		else
			exit 1
		fi
		;;

	fullupgrade)
		# Wait 5 seconds before beginning.
		sleep 5

		# Redirect I/O to console.
		exec </dev/console >/dev/console 2>/dev/console

		printf "\n\n\33[37m%s\33[0m\n" "Firmware upgrade in progress. Please wait..."

		# Check if firmware file exists.
		if [ ! -r "$2" ]; then
			msg="ERROR: Firmware file does not exist."
			printf "\33[31m%s\33[0m\n" "${msg}"
			/usr/bin/logger "UPGRADE ${msg}"
			exit 1
		fi

		# Test firmware file
		/usr/bin/xz -t "$2" 2>&1
		if [ 0 != $? ]; then
			msg="ERROR: Firmware file is corrupted."
			printf "\33[31m%s\33[0m\n" "${msg}"
			/usr/bin/logger "UPGRADE ${msg}"
			exit 1
		fi

		backup_chflags
		remove_chflags

		# backup config
		/bin/mkdir -p /tmp/configbak
		cp -p /conf/* /tmp/configbak 2>/dev/null
		if [ -f /boot.config ]; then
			cp -p /boot.config /tmp/configbak 2>/dev/null
		fi
		# Backup loader.conf.local
		if [ -f /cf/boot/loader.conf.local ]; then
			cp -p /cf/boot/loader.conf.local /tmp/configbak
		fi

		/usr/bin/tar xzUPf "$2" -C / 2>&1
		result=$?
		if [ 0 != ${result} ]; then # successfully?
			msg="ERROR: Failed to upgrade system firmware!"
			printf "\33[31m%s\33[0m\n" "${msg}"
			/usr/bin/logger "UPGRADE ${msg}"
		else
			msg="Firmware installed successfully."
			printf "\33[37;44m%s\33[0m\n" "${msg}"
			/usr/bin/logger "UPGRADE: ${msg}"
		fi

		# restore config
		cp -p /tmp/configbak/* /conf 2>/dev/null
		if [ -f /conf/boot.config ]; then
			mv /conf/boot.config / 2>/dev/null
		fi
		# Restore loader.conf.local
		if [ -f /conf/loader.conf.local ]; then
			mv /conf/loader.conf.local /cf/boot
		fi
		rm -r /tmp/configbak

		# restore /etc symlinks
		rm /etc/hosts
		ln -s /var/etc/hosts /etc/hosts

		restore_chflags

		# Start upgrade script to remove obsolete files
		/etc/install/upgrade.sh clean /

		# Reboot system if upgrade was successfully.
		if [ 0 -eq ${result} ]; then
			msg="Rebooting server..."
			printf "\33[37m%s\33[0m\n" "${msg}"
			/usr/bin/logger "${msg}"
			/sbin/shutdown -r now > /dev/null 2>&1
		else
			exit 1
		fi

		;;
esac

exit 0

